[1mdiff --git a/lists/templates/home.html b/lists/templates/home.html[m
[1mindex 49962d5..153c139 100644[m
[1m--- a/lists/templates/home.html[m
[1m+++ b/lists/templates/home.html[m
[36m@@ -3,7 +3,7 @@[m
             <title>To-Do lists</title>[m
         </head>[m
         <body>[m
[31m-            <h1>Your To-Do lists</h1>[m
[32m+[m[32m            <h1>Start a new To-Do list</h1>[m
             <form method="POST">[m
                 <input id="id_new_item" name="item_text" placeholder="Enter a to-do item"/>[m
                 {% csrf_token %}[m
[1mdiff --git a/lists/templates/home.html~ b/lists/templates/home.html~[m
[1mindex 43282ec..49962d5 100644[m
[1m--- a/lists/templates/home.html~[m
[1m+++ b/lists/templates/home.html~[m
[36m@@ -11,7 +11,7 @@[m
             [m
             <table id="id_list_table">[m
                 {% for item in items %}[m
[31m-                    <tr><td>1: {{ item.text }}</td></tr>[m
[32m+[m[32m                    <tr><td>{{ forloop.counter }}: {{ item.text }}</td></tr>[m
                 {% endfor %}[m
             </table>[m
         </body>[m
[1mdiff --git a/lists/tests.py b/lists/tests.py[m
[1mindex 86ac146..bd3a8e7 100644[m
[1m--- a/lists/tests.py[m
[1m+++ b/lists/tests.py[m
[36m@@ -37,24 +37,13 @@[m [mclass HomePageTest(TestCase):[m
         response = home_page(request)[m
         [m
         self.assertEqual(response.status_code, 302)[m
[31m-        self.assertEqual(response['location'], '/')[m
[32m+[m[32m        self.assertEqual(response['location'], '/lists/the-only-list-in-the-world/')[m
         [m
     def test_home_page_only_saves_items_when_necessary(self): [m
         request = HttpRequest()[m
         home_page(request)[m
         self.assertEqual(Item.objects.count(), 0)[m
         [m
[31m-    def test_home_page_displays_all_list_items(self): [m
[31m-        Item.objects.create(text='itemey 1') [m
[31m-        Item.objects.create(text='itemey 2')[m
[31m-        [m
[31m-        request = HttpRequest()[m
[31m-        response = home_page(request) [m
[31m-        [m
[31m-        self.assertIn('itemey 1', response.content.decode())[m
[31m-        self.assertIn('itemey 2', response.content.decode())[m
[31m-        [m
[31m-        [m
 class ItemModelTest(TestCase):[m
  [m
     def test_saving_and_retrieving_items(self):[m
[36m@@ -74,3 +63,20 @@[m [mclass ItemModelTest(TestCase):[m
         self.assertEqual(first_saved_item.text, 'The first (ever) list item')[m
         self.assertEqual(second_saved_item.text, 'Item the second') [m
         [m
[32m+[m[41m        [m
[32m+[m[32mclass ListViewTest(TestCase):[m[41m [m
[32m+[m[32m    def test_home_page_displays_all_list_items(self):[m[41m [m
[32m+[m[32m        Item.objects.create(text='itemey 1')[m[41m [m
[32m+[m[32m        Item.objects.create(text='itemey 2')[m
[32m+[m[41m        [m
[32m+[m[32m        response = self.client.get('/lists/the-only-list-in-the-world/')[m
[32m+[m[41m        [m
[32m+[m[32m        self.assertContains(response, 'itemey 1')[m
[32m+[m[32m        self.assertContains(response, 'itemey 2')[m
[32m+[m[41m    [m
[32m+[m[32m    def test_uses_list_template(self):[m[41m [m
[32m+[m[32m        response = self.client.get('/lists/the-only-list-in-the-world/')[m
[32m+[m[32m        self.assertTemplateUsed(response, 'list.html')[m
[41m+        [m
[41m+        [m
[41m+    [m
[1mdiff --git a/lists/tests.py~ b/lists/tests.py~[m
[1mindex be904c8..5b7efd1 100644[m
[1m--- a/lists/tests.py~[m
[1m+++ b/lists/tests.py~[m
[36m@@ -37,7 +37,7 @@[m [mclass HomePageTest(TestCase):[m
         response = home_page(request)[m
         [m
         self.assertEqual(response.status_code, 302)[m
[31m-        self.assertEqual(response['location'], '/')[m
[32m+[m[32m        self.assertEqual(response['location'], '/lists/the-only-list-in-the-world/')[m
         [m
     def test_home_page_only_saves_items_when_necessary(self): [m
         request = HttpRequest()[m
[36m@@ -63,3 +63,14 @@[m [mclass ItemModelTest(TestCase):[m
         self.assertEqual(first_saved_item.text, 'The first (ever) list item')[m
         self.assertEqual(second_saved_item.text, 'Item the second') [m
         [m
[32m+[m[41m        [m
[32m+[m[32mclass ListViewTest(TestCase):[m[41m [m
[32m+[m[32m    def test_home_page_displays_all_list_items(self):[m[41m [m
[32m+[m[32m        Item.objects.create(text='itemey 1')[m[41m [m
[32m+[m[32m        Item.objects.create(text='itemey 2')[m
[32m+[m[41m        [m
[32m+[m[32m        response = self.client.get('/lists/the-only-list-in-the-world/')[m
[32m+[m[41m        [m
[32m+[m[32m        self.assertContains(response, 'itemey 1')[m
[32m+[m[32m        self.assertContains(response, 'itemey 2')[m
[32m+[m[41m        [m
[1mdiff --git a/lists/views.py b/lists/views.py[m
[1mindex a5ad8b3..e4e4b7f 100644[m
[1m--- a/lists/views.py[m
[1m+++ b/lists/views.py[m
[36m@@ -6,7 +6,11 @@[m [mfrom lists.models import Item[m
 def home_page(request): [m
     if request.method == 'POST': [m
         Item.objects.create(text=request.POST['item_text'])[m
[31m-        return redirect('/')[m
[32m+[m[32m        return redirect('/lists/the-only-list-in-the-world/')[m
         [m
[32m+[m[32m    return render(request, 'home.html')[m
[32m+[m[41m    [m
[32m+[m[32mdef view_list(request):[m[41m [m
     items = Item.objects.all()[m
[31m-    return render(request, 'home.html', {'items': items})[m
[32m+[m[32m    return render(request, 'list.html', {'items': items})[m
[41m+    [m
[1mdiff --git a/lists/views.py~ b/lists/views.py~[m
[1mindex 6a3b22c..4d9a6e6 100644[m
[1m--- a/lists/views.py~[m
[1m+++ b/lists/views.py~[m
[36m@@ -6,6 +6,12 @@[m [mfrom lists.models import Item[m
 def home_page(request): [m
     if request.method == 'POST': [m
         Item.objects.create(text=request.POST['item_text'])[m
[31m-        return redirect('/')[m
[32m+[m[32m        return redirect('/lists/the-only-list-in-the-world/')[m
         [m
[31m-    return render(request, 'home.html')[m
[32m+[m[32m    items = Item.objects.all()[m
[32m+[m[32m    return render(request, 'home.html', {'items': items})[m
[32m+[m[41m    [m
[32m+[m[32mdef view_list(request):[m[41m [m
[32m+[m[32m    items = Item.objects.all()[m
[32m+[m[32m    return render(request, 'list.html', {'items': items})[m
[41m+    [m
[1mdiff --git a/superlists/urls.py b/superlists/urls.py[m
[1mindex cf41129..4889a15 100644[m
[1m--- a/superlists/urls.py[m
[1m+++ b/superlists/urls.py[m
[36m@@ -4,6 +4,8 @@[m [mfrom django.contrib import admin[m
 urlpatterns = patterns('',[m
     # Examples:[m
      url(r'^$', 'lists.views.home_page', name='home'),[m
[32m+[m[32m     url(r'^lists/the-only-list-in-the-world/$', 'lists.views.view_list',[m[41m [m
[32m+[m[32m        name='view_list'),[m
     # url(r'^blog/', include('blog.urls')),[m
 [m
     #url(r'^admin/', include(admin.site.urls)),[m
[1mdiff --git a/superlists/urls.py~ b/superlists/urls.py~[m
[1mindex d09f78f..cf41129 100644[m
[1m--- a/superlists/urls.py~[m
[1m+++ b/superlists/urls.py~[m
[36m@@ -3,7 +3,7 @@[m [mfrom django.contrib import admin[m
 [m
 urlpatterns = patterns('',[m
     # Examples:[m
[31m-     url(r'^$', 'lists.views.home', name='home'),[m
[32m+[m[32m     url(r'^$', 'lists.views.home_page', name='home'),[m
     # url(r'^blog/', include('blog.urls')),[m
 [m
     #url(r'^admin/', include(admin.site.urls)),[m
